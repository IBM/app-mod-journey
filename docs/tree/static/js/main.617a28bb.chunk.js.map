{"version":3,"sources":["examples/org-chart.json.bck","components/MixedNodeElement.js","components/Switch/index.js","components/PureSvgNodeElement.js","components/MixedNodeInputElement.js","components/Header/Header.js","App.js","index.js"],"names":["module","exports","MixedNodeElement","Component","_ref","_ref$nodeData","nodeData","triggerNodeToggle","_ref$foreignObjectPro","foreignObjectProps","React","createElement","Fragment","r","style","display","flexDirection","alignItems","border","paddingBottom","backgroundColor","name","listStyleType","padding","attributes","Object","keys","map","labelKey","i","key","concat","children","textAlign","onClick","__rd3t","collapsed","textLayout","vertical","title","textAnchor","x","attribute","dy","horizontal","y","PureSvgNodeElement","nodeDatum","orientation","toggleNode","onNodeClick","className","assign","entries","_ref2","_ref3","_slicedToArray","labelValue","descriptionTimerInfo","timerId","nodeName","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","nodeClick","bind","_assertThisInitialized","nodeMouseEnter","nodeMouseLeave","getObjectInTreeByNodename","swapChildrenInTree","state","showDescription","_createClass","value","treeData","currentNodeWithChildren","matchedNode","failSafe","actionSentence","this","findNodeInTree","findNodeWithChildrenInTree","e","console","info","treeNode","treeBranch","length","depth","appState","data","initialDepth","lockChildren","newData","updateActionSentence","getActionSentence","updateTree","matchingObject","changePrimary","nodeWithChildren","nextNodeWithChildren","dataArray","nodeToAddChildren","_this2","_this$props$nodeData","props","setTimeout","setState","clearTimeout","_this$props","_this$props$nodeData2","swapChildrenInTree2","color","_this$props2","_this$props2$nodeData","_this$props2$foreignO","nodeNameFontSize","fill","onMouseEnter","onMouseLeave","showingBranches","primary","height","fontWeight","fontSize","root","docs","target","href","videos","width","description","Header","_React$Component","apply","arguments","DecisionTree","size","rel","log","version","customNodeFnMapping","svg","fn","rd3tProps","mixed","nodeSize","input","MixedNodeInputElement","countNodes","count","undefined","n","reduce","sum","child","App","closeModal","showDialog","showModal","handleCustomNodeFnChange","evt","customNodeKey","renderCustomNodeElement","toggleCollapseNeighborNodes","prevState","shouldCollapseNeighborNodes","addChildNode","clone","_children","addedNodesCount","push","id","removeChildNode","pop","setTreeData","setActionSentence","generateTreeData","changePrimaryInGroupAndReload","tocMode","ta","totalNodeCount","Array","isArray","orgChartJson","dimensions","centeringTransitionDuration","translateX","translateY","collapsible","depthFactor","zoomable","draggable","zoom","scaleExtent","min","max","separation","siblings","nonSiblings","enableLegacyTransitions","transitionDuration","showingAll","styles","nodes","node","circle","stroke","leafNode","setLargeTree","setOrientation","setPathFunc","handleChange","handleFloatChange","toggleCollapsible","toggleZoomable","toggleDraggable","toggleCenterNodes","setScaleExtent","setSeparation","setNodeSize","pathFunc","parsedIntValue","parseInt","_defineProperty","isNaN","parsedFloatValue","parseFloat","treeContainer","_this$treeContainer$g","getBoundingClientRect","populateAllTreeData","getEntryFromGeneratedData","groupId","_step","_iterator","_createForOfIteratorHelper","taGenerate","tocSections","s","done","section","err","f","Set","groupSet","generatedTOC","_step2","_iterator2","entry","has","getSectionNameFromGroupId","add","text","without","newDepth","entryId","_step3","_iterator3","_step4","_iterator4","childPointers","getEntryFromGeneratedDataByName","_step5","_iterator5","hasChildPointers","_step6","_iterator6","childPointer","_i","childNode","rootNode","currentNode","nextNode","currentDepth","_step7","_iterator7","isTreeView","showBranches","showAll","_this3","toc","generateToc","treeViewActionComponent","_getTreeViewActionComponent","actionControlCls","showToc","Modal","isOpen","onRequestClose","contentLabel","ref","float","alt","src","tc","Tree","hasInteractiveNodes","rootNodeClassName","branchNodeClassName","translate","onNodeMouseOver","_len","args","_key","onNodeMouseOut","_len2","_key2","onLinkClick","_len3","_key3","onLinkMouseOver","_len4","_key4","onLinkMouseOut","_len5","_key5","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.617a28bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/org-chart.json.fefe41cd.bck\";","import React from 'react';\n\nconst MixedNodeElement = ({ nodeData = {}, triggerNodeToggle, foreignObjectProps = {} }) => {\n  return (\n    <React.Fragment>\n      <circle r={20}></circle>\n      <foreignObject {...foreignObjectProps}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            border: '1px solid black',\n            paddingBottom: '1rem',\n            backgroundColor: 'rgb(248, 248, 255)', // ghostwhite\n          }}\n        >\n          <h3>{nodeData.name}</h3>\n          <ul style={{ listStyleType: 'none', padding: 0 }}>\n            {nodeData.attributes &&\n              Object.keys(nodeData.attributes).map((labelKey, i) => (\n                <li key={`${labelKey}-${i}`}>\n                  {labelKey}: {nodeData.attributes[labelKey]}\n                </li>\n              ))}\n          </ul>\n          {nodeData.children && (\n            <button style={{ textAlign: 'center' }} onClick={triggerNodeToggle}>\n              {nodeData.__rd3t.collapsed ? '⬅️ ➡️ Expand' : '➡️ ⬅️ Collapse'}\n            </button>\n          )}\n        </div>\n      </foreignObject>\n    </React.Fragment>\n  );\n};\n\nexport default MixedNodeElement;\n","import PropTypes from 'prop-types'\nimport React, { Component } from 'react';\nimport './styles.css';\n\nclass Input extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool.isRequired,\n    variable: PropTypes.object\n  };\n\n  render() {\n    const { variable, name, onChange, checked } = this.props;\n    return (\n      <div className='onoffswitch'>\n        <input type='checkbox' className='onoffswitch-checkbox' id={name} name={name}\n          onChange={onChange} checked={checked} {...variable} />\n        <label className='onoffswitch-label' htmlFor={name}>\n          <span className='onoffswitch-inner' />\n          <span className='onoffswitch-switch' />\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default Input;","import React from 'react';\n\nconst textLayout = {\n  vertical: {\n    title: {\n      textAnchor: 'start',\n      x: 40,\n    },\n    attributes: {},\n    attribute: {\n      x: 40,\n      dy: '1.2em',\n    },\n  },\n  horizontal: {\n    title: {\n      textAnchor: 'start',\n      y: 40,\n    },\n    attributes: {\n      x: 0,\n      y: 40,\n    },\n    attribute: {\n      x: 0,\n      dy: '1.2em',\n    },\n  },\n};\n\nconst PureSvgNodeElement = ({ nodeDatum, orientation, toggleNode, onNodeClick }) => {\n  return (\n    <>\n      <circle r={20} onClick={toggleNode}></circle>\n      <g className=\"rd3t-label\">\n        <text\n          className=\"rd3t-label__title\"\n          {...textLayout[orientation].title}\n          onClick={onNodeClick}\n        >\n          {nodeDatum.name}\n        </text>\n        <text className=\"rd3t-label__attributes\" {...textLayout[orientation].attributes}>\n          {nodeDatum.attributes &&\n            Object.entries(nodeDatum.attributes).map(([labelKey, labelValue], i) => (\n              <tspan key={`${labelKey}-${i}`} {...textLayout[orientation].attribute}>\n                {labelKey}: {labelValue}\n              </tspan>\n            ))}\n        </text>\n      </g>\n    </>\n  );\n};\n\nexport default PureSvgNodeElement;\n","import React from 'react';\nimport { Component } from 'react';\n\nlet descriptionTimerInfo = {timerId: null, nodeName: ''};\n\nclass MixedNodeElement extends Component {\n\n    constructor() {\n        super();\n        this.nodeClick = this.nodeClick.bind(this);\n        this.nodeMouseEnter = this.nodeMouseEnter.bind(this);\n        this.nodeMouseLeave = this.nodeMouseLeave.bind(this);\n        this.getObjectInTreeByNodename = this.getObjectInTreeByNodename.bind(this);\n        this.swapChildrenInTree = this.swapChildrenInTree.bind(this);\n\n        this.state = {showDescription: false}\n    }\n\n    getActionSentence(treeData, name) {\n        let currentNodeWithChildren = treeData;\n        let matchedNode = null;\n        let failSafe = 0;\n        let actionSentence = \"collect data\"\n        try {\n            while(matchedNode === null && failSafe < 50) {\n                failSafe++;\n                matchedNode = this.findNodeInTree(currentNodeWithChildren, name);\n                currentNodeWithChildren = this.findNodeWithChildrenInTree(currentNodeWithChildren);\n                if(matchedNode !== null) {\n                    actionSentence = actionSentence + \" - \" + matchedNode.name;\n                } else {\n                    actionSentence = actionSentence + \" - \" + currentNodeWithChildren.name;\n                }\n            }\n        } catch(e) {\n            console.info('Some issue with constructing the sentence.....');\n        }\n\n        return actionSentence;\n    }\n\n    findNodeWithChildrenInTree(treeNode)  {\n        if(treeNode != null) {\n            let treeBranch = treeNode.children;\n            for(let i=0;i<treeBranch.length;i++) {\n                if(treeBranch[i].children) {\n                    return treeBranch[i];\n                }\n            }\n        }\n        return null;\n    }\n\n  //Search for node in this tree branch, returning null if it is not found\n  findNodeInTree(treeNode, name, depth)  {\n        if(treeNode != null) {\n            let treeBranch = treeNode.children\n            //check the name\n            for(let i=0;i<treeBranch.length;i++) {\n                if(treeBranch[i].name === name) {\n                    let matchedNode = treeBranch[i];\n                    return {matchedNode, depth}\n                }\n            }\n            //check for children in the branch\n            for(let i=0;i<treeBranch.length;i++) {\n                if(treeBranch[i].children && treeBranch[i].children.length > 0) {\n                    depth++;\n                    return this.findNodeInTree(treeBranch[i], name, depth);\n                }\n            }\n        }\n        return null;\n  }\n\n  //This takes the whole tree data and a name\n  //It finds the node with that name, and the children at the same level as that node and swaps them, rturning the new data\n  swapChildrenInTree(appState, data, name, triggerNodeToggle) {\n      let currentNodeWithChildren = data;\n      let matchedNode = null;\n      let initialDepth = 1; //If we ask for a node that is not there, make sure we can break the loop\n      while(matchedNode === null && initialDepth < 50) {\n          initialDepth++;\n          matchedNode = this.findNodeInTree(currentNodeWithChildren, name);\n          currentNodeWithChildren = this.findNodeWithChildrenInTree(currentNodeWithChildren);\n      }\n\n      //Now swap the children, merge and return the data\n      if(currentNodeWithChildren != null) {\n              if(!matchedNode.lockChildren) {\n                  matchedNode.children = currentNodeWithChildren.children;\n              }\n              if(matchedNode.name !== currentNodeWithChildren.name) {\n                  if(!currentNodeWithChildren.lockChildren) {\n                      delete currentNodeWithChildren.children;\n                  }\n                  appState.initialDepth = initialDepth;\n              }\n          let newData = Object.assign({}, data);\n          appState.updateActionSentence(this.getActionSentence(appState.data, matchedNode.name));\n          appState.updateTree(newData);\n      }\n  }\n\n  swapChildrenInTree2(appState, data, name, triggerNodeToggle) {\n        let currentNodeWithChildren = data;\n        let matchedNode = null;\n        let depth = 50;\n        let initialDepth = 1; //If we ask for a node that is not there, make sure we can break the loop\n        while(matchedNode === null && initialDepth < 50) {\n            initialDepth++;\n            let matchingObject = this.findNodeInTree(currentNodeWithChildren, name, initialDepth);\n            matchedNode = matchingObject.matchedNode;\n            depth = matchingObject.depth;\n        }\n          appState.initialDepth = depth;\n          appState.changePrimary(name);\n    }\n\n  //We walk the tree and find the JS object with the matching name\n  getObjectInTreeByNodename(nodeWithChildren, name) {\n      let nextNodeWithChildren = null;\n\n      if(nodeWithChildren != null && nodeWithChildren.children && nodeWithChildren.children.length > 0) {\n          let dataArray = nodeWithChildren.children;\n          for(let x=0;x<dataArray.length;x++) {\n              if(dataArray[x].children && dataArray[x].children.length > 0) {\n                  nextNodeWithChildren = dataArray[x];\n              }\n          }\n          for(let i=0;i<dataArray.length;i++) {\n              if(dataArray[i].name === name) {\n                  let nodeToAddChildren =  dataArray[i];\n                  return {nodeToAddChildren, nextNodeWithChildren}\n              }\n          }\n          return this.getObjectInTreeByNodename(nextNodeWithChildren, name);\n      }\n  }\n\n  //When we enter the node we give a short delay then we pop up a description\n  nodeMouseEnter() {\n      let {nodeData = {}} = this.props;\n      if(nodeData) {\n          //If we already are running a timer for the description for this node then do nothing\n          if(nodeData.name === descriptionTimerInfo.nodeName) {\n              return;\n          }\n          let timerId = setTimeout(() =>{\n              this.setState({showDescription: true});\n              //Now this is where I pop up the dialog or something\n          }, 800);\n          descriptionTimerInfo = {timerId: timerId, nodeName: nodeData.name}\n      }\n  }\n\n  nodeMouseLeave() {\n        if(descriptionTimerInfo != null && descriptionTimerInfo.timerId != null) {\n          clearTimeout(descriptionTimerInfo.timerId);\n          descriptionTimerInfo = {timerId: null, nodeName: ''}\n          if(this.state.showDescription) {\n              this.setState({showDescription: false});\n          }\n      }\n  }\n\n  nodeClick() {\n      let {appState, nodeData = {}, triggerNodeToggle, foreignObjectProps = {}} = this.props;\n      //At this point we find the siblings of this node, then find the one with children and move those children to this node\n      //Going to hard code for now\n      if(nodeData.children && nodeData.children.length >0) {\n          appState.updateActionSentence(this.getActionSentence(appState.data, nodeData.name));\n          triggerNodeToggle();\n      } else {\n          this.swapChildrenInTree2(appState, appState.data, nodeData.name, triggerNodeToggle);\n      }\n  }\n\n  getFontColor(color) {\n        //Override for now\n        return 'black';\n        if(color != 'undefined') {\n            return color;\n        }\n        return 'black';\n  }\n\n  render() {\n      let {appState, nodeData = {}, triggerNodeToggle, foreignObjectProps = {}} = this.props;\n      let nodeNameFontSize = '25px'\n      if(nodeData.name.length > 35) {\n          nodeNameFontSize = '22px'\n      }else {\n          nodeNameFontSize = '25px'\n      }\n\n        return (\n            <React.Fragment>\n                <circle fill={'white'} r={20} onClick={this.nodeClick} onMouseEnter={this.nodeMouseEnter} onMouseLeave={this.nodeMouseLeave}></circle>\n                {!appState.showingBranches && !nodeData.primary ? null :\n                    <foreignObject {...foreignObjectProps} >\n                        <div\n                            style={{\n                                height: '100%',\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                                textAlign: 'center',\n                                //justifyContent: 'space-between',\n                                border: '1px solid white',\n                                paddingBottom: '1rem',\n                            }}\n                        >\n                            <div style={{backgroundColor: 'white'}}>\n                                <span onClick={this.nodeClick} onMouseEnter={this.nodeMouseEnter}\n                                      onMouseLeave={this.nodeMouseLeave} style={{\n                                    backgroundColor: 'white',\n                                    color: nodeData.primary ? 'black' : 'lightgrey',\n                                    fontWeight: nodeData.primary ? '700' : '400',\n                                    fontSize: nodeNameFontSize\n                                }}>{nodeData.name}</span>\n                                {nodeData.root ? (<div/>) :\n                                    <div style={{backgroundColor: 'white'}}>\n                                        <span style={{fontSize: 22}}>{nodeData.docs ? (\n                                            <a target='_blank' href={nodeData.docs}>Docs</a>) : ''}</span>\n                                        <span\n                                            style={{fontSize: 22}}> {(nodeData.docs && nodeData.videos) ? ('|') : ''} </span>\n                                        <span style={{fontSize: 22}}>{nodeData.videos ? (\n                                            <a target='_blank' href={nodeData.videos}>Videos</a>) : ''}</span>\n                                    </div>}\n                            </div>\n                        </div>\n                    </foreignObject>\n                }\n\n                {/* WATCH OUT!! If you pop the tooltip so that is covers the mouse it will trigger the mouseLeave and you get a flickering loop*/}\n                {this.state.showDescription ?\n                    <foreignObject width={300} height={200} x={-150} y={-225}>\n                        <div\n                            style={{\n                                height: '100%',\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                                textAlign: 'center',\n                                //justifyContent: 'space-between',\n                                border: '1px solid black',\n                                paddingBottom: '1rem',\n                                backgroundColor: 'rgb(248, 248, 255)', // ghostwhite\n                                //backgroundColor: 'white',\n                            }}\n                        >\n                            <span style={{color: 'black', fontWeight: '400', fontSize: '20px'}}>\n                                <p>{nodeData.name}</p>\n                                <p>{nodeData.description ? nodeData.description : ''}</p>\n                            </span>\n                        </div>\n                    </foreignObject>\n                    :\n                    null\n                }\n            </React.Fragment>\n        );\n    }\n//};\n\n}\n\nexport default MixedNodeElement;\n","import React from 'react';\nimport {DecisionTree} from '@carbon/icons-react';\nimport './header.css';\n\nexport default class Header extends React.Component {\n  render() {\n    const {onClick} = this.props;\n    return (\n      <React.Fragment>\n        <div className={'header'}>\n          <div className={'title-wrapper'}>\n            <DecisionTree size={32}/>\n            <span className={'title-header'}>Java Application Modernization Playbook</span>\n          </div>\n          <div className={'additional-header-links'}>\n            <span><a href='#' onClick={onClick}> About</a> </span>\n            <span><a target='_blank'  rel='noopener noreferrer' href='https://github.com/IBM/app-mod-journey/tree/main'> Contribute</a> </span>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","import React, { Component } from 'react';\nimport clone from 'clone';\nimport Tree from 'react-d3-tree';\nimport { version } from 'react-d3-tree/package.json';\nimport Switch from './components/Switch';\nimport MixedNodeElement from './components/MixedNodeElement';\nimport PureSvgNodeElement from './components/PureSvgNodeElement';\nimport MixedNodeInputElement from './components/MixedNodeInputElement';\nimport Header from './components/Header/Header';\nimport './App.css';\n\n// Data examples\nimport orgChartJson from './examples/org-chart.json.bck';\nimport ta from './examples/ta.json';\nimport taGenerate from './examples/ta-generate.json';\n\nimport Modal from 'react-modal';\n\nconsole.log('Demo React version: ', React.version);\n\nconst customNodeFnMapping = {\n  svg: {\n    description: 'Default - Pure SVG node & label (IE11 compatible)',\n    fn: (rd3tProps, appState) => (\n      <PureSvgNodeElement\n        nodeDatum={rd3tProps.nodeDatum}\n        toggleNode={rd3tProps.toggleNode}\n        orientation={appState.orientation}\n      />\n    ),\n  },\n  mixed: {\n    description: 'MixedNodeElement - SVG `circle` + `foreignObject` label',\n    fn: ({ nodeDatum, toggleNode }, appState) => (\n      <MixedNodeElement\n        nodeData={nodeDatum}\n        triggerNodeToggle={toggleNode}\n        foreignObjectProps={{\n          width: appState.nodeSize.x,\n          height: appState.nodeSize.y,\n          x: -50,\n          y: 50,\n        }}\n      />\n    ),\n  },\n  input: {\n    description: 'MixedNodeElement - Interactive nodes with inputs',\n    fn: ({ nodeDatum, toggleNode }, appState) => (\n      <MixedNodeInputElement\n        nodeData={nodeDatum}\n        triggerNodeToggle={toggleNode}\n        appState={appState}\n        foreignObjectProps={{\n          width: appState.nodeSize.x,\n          height: appState.nodeSize.y,\n          x: -50,\n          y: 25,\n        }}\n      />\n    ),\n  },\n};\n\nconst countNodes = (count = 0, n) => {\n  // Count the current node\n  count += 1;\n\n  // Base case: reached a leaf node.\n  if (!n.children) {\n    return count;\n  }\n\n  // Keep traversing children while updating `count` until we reach the base case.\n  return n.children.reduce((sum, child) => countNodes(sum, child), count);\n};\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n  },\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.addedNodesCount = 0;\n\n    this.setTreeData = this.setTreeData.bind(this);\n    this.setActionSentence = this.setActionSentence.bind(this);\n    this.generateTreeData = this.generateTreeData.bind(this);\n    this.changePrimaryInGroupAndReload = this.changePrimaryInGroupAndReload.bind(this);\n\n    this.state = {\n      tocMode: false, //Table of contents mode\n      data: ta,\n      updateTree: this.setTreeData,\n      changePrimary: this.changePrimaryInGroupAndReload,\n      updateActionSentence: this.setActionSentence,\n      totalNodeCount: countNodes(0, Array.isArray(orgChartJson) ? orgChartJson[0] : orgChartJson),\n      orientation: 'horizontal',\n      dimensions: undefined,\n      centeringTransitionDuration: 800,\n      translateX: 200,\n      translateY: 200,\n      collapsible: true,\n      shouldCollapseNeighborNodes: false,\n      initialDepth: 2,\n      depthFactor: 250,\n      zoomable: true,\n      draggable: true,\n      zoom: 0.6,\n      scaleExtent: { min: 0.1, max: 5 },\n      separation: { siblings: 1.25, nonSiblings: 1.75 },\n      nodeSize: { x: 200, y: 150 },\n      enableLegacyTransitions: false,\n      transitionDuration: 500,\n      renderCustomNodeElement: customNodeFnMapping['input'].fn,\n      showingBranches: true,\n      showingAll: false,\n      showDialog: false,\n      closeModal: this.closeModal,\n      actionSentence: [],\n      styles: {\n        nodes: {\n          node: {\n            circle: {\n              fill: '#52e2c5',\n            },\n            attributes: {\n              stroke: '#000',\n            },\n          },\n          leafNode: {\n            circle: {\n              fill: 'transparent',\n            },\n            attributes: {\n              stroke: '#000',\n            },\n          },\n        },\n      },\n    };\n\n    this.setLargeTree = this.setLargeTree.bind(this);\n    this.setOrientation = this.setOrientation.bind(this);\n    this.setPathFunc = this.setPathFunc.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFloatChange = this.handleFloatChange.bind(this);\n    this.toggleCollapsible = this.toggleCollapsible.bind(this);\n    this.toggleZoomable = this.toggleZoomable.bind(this);\n    this.toggleDraggable = this.toggleDraggable.bind(this);\n    this.toggleCenterNodes = this.toggleCenterNodes.bind(this);\n    this.setScaleExtent = this.setScaleExtent.bind(this);\n    this.setSeparation = this.setSeparation.bind(this);\n    this.setNodeSize = this.setNodeSize.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  closeModal = () => {\n    this.setState({showDialog: false});\n  };\n\n  showModal = () => {\n    this.setState({showDialog: true});\n  };\n\n  setTreeData(data) {\n    this.setState({\n      data/*,\n      totalNodeCount: countNodes(0, Array.isArray(data) ? data[0] : data),*/\n    });\n  }\n\n  setActionSentence(actionSentence) {\n    console.info('..... actionSentence .....', actionSentence);\n    this.setState({\n      actionSentence\n    });\n  }\n\n  setLargeTree(data) {\n    this.setState({\n      data,\n      transitionDuration: 0,\n    });\n  }\n\n  setOrientation(orientation) {\n    this.setState({ orientation });\n  }\n\n  setPathFunc(pathFunc) {\n    this.setState({ pathFunc });\n  }\n\n  handleChange(evt) {\n    const target = evt.target;\n    const parsedIntValue = parseInt(target.value, 10);\n    if (target.value === '') {\n      this.setState({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedIntValue)) {\n      this.setState({\n        [target.name]: parsedIntValue,\n      });\n    }\n  }\n\n  handleFloatChange(evt) {\n    const target = evt.target;\n    const parsedFloatValue = parseFloat(target.value);\n    if (target.value === '') {\n      this.setState({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedFloatValue)) {\n      this.setState({\n        [target.name]: parsedFloatValue,\n      });\n    }\n  }\n\n  handleCustomNodeFnChange = evt => {\n    const customNodeKey = evt.target.value;\n\n    this.setState({ renderCustomNodeElement: customNodeFnMapping[customNodeKey].fn });\n  };\n\n  toggleCollapsible() {\n    this.setState(prevState => ({ collapsible: !prevState.collapsible }));\n  }\n\n  toggleCollapseNeighborNodes = () => {\n    this.setState(prevState => ({\n      shouldCollapseNeighborNodes: !prevState.shouldCollapseNeighborNodes,\n    }));\n  };\n\n  toggleZoomable() {\n    this.setState(prevState => ({ zoomable: !prevState.zoomable }));\n  }\n\n  toggleDraggable() {\n    this.setState(prevState => ({ draggable: !prevState.draggable }));\n  }\n\n  toggleCenterNodes() {\n    if (this.state.dimensions !== undefined) {\n      this.setState({\n        dimensions: undefined,\n      });\n    } else {\n      if (this.treeContainer) {\n        const { width, height } = this.treeContainer.getBoundingClientRect();\n        this.setState({\n          dimensions: {\n            width,\n            height,\n          },\n        });\n      }\n    }\n  }\n\n  setScaleExtent(scaleExtent) {\n    this.setState({ scaleExtent });\n  }\n\n  setSeparation(separation) {\n    if (!isNaN(separation.siblings) && !isNaN(separation.nonSiblings)) {\n      this.setState({ separation });\n    }\n  }\n\n  setNodeSize(nodeSize) {\n    if (!isNaN(nodeSize.x) && !isNaN(nodeSize.y)) {\n      this.setState({ nodeSize });\n    }\n  }\n\n  addChildNode = () => {\n    console.info('......addChildNode.....')\n    const data = clone(this.state.data);\n    const target = data[0].children ? data[0].children : data[0]._children;\n    this.addedNodesCount++;\n    target.push({\n      name: `Inserted Node ${this.addedNodesCount}`,\n      id: `inserted-node-${this.addedNodesCount}`,\n    });\n    this.setState({\n      data,\n    });\n  };\n\n  removeChildNode = () => {\n    const data = clone(this.state.data);\n    const target = data[0].children ? data[0].children : data[0]._children;\n    target.pop();\n    this.addedNodesCount--;\n    this.setState({\n      data,\n    });\n  };\n\n  componentDidMount() {\n    const dimensions = this.treeContainer.getBoundingClientRect();\n    this.setState({\n      translateX: dimensions.width / 25,\n      translateY: dimensions.height / 2.5,\n    });\n    this.setTreeData(this.populateAllTreeData(this.getEntryFromGeneratedData(\"A1\")));\n  }\n\n  showToc() {\n    this.setState({tocMode: !this.state.tocMode});\n  }\n\n  getSectionNameFromGroupId(groupId) {\n    for(let section of taGenerate.tocSections) {\n      if(section.groupId == groupId) {\n        return section.name\n      }\n    }\n    return null;\n  }\n\n  generateToc() {\n    if(!this.state.tocMode) {\n      return null;\n    }\n\n    let sectionSet = new Set(taGenerate.tocSections);\n    let groupSet = new Set();\n    let generatedTOC = [];\n    generatedTOC.push(<h1>Table of Contents</h1>);\n    for(let entry of taGenerate.data) {\n      //Check if this is teh first entry for the group,a nd add the heading for the group if it is\n      if(!groupSet.has(entry.groupId)) {\n        console.info('adding groupId: ', entry.groupId);\n        generatedTOC.push(<h2>{this.getSectionNameFromGroupId(entry.groupId)}</h2>);\n        groupSet.add(entry.groupId);\n      }\n\n      let text = (\n          <div key={entry.name} >\n            <span style={{color: entry.primary ? 'black' : 'grey', fontWeight: entry.primary ? '700' : '400'}} >{entry.name}</span>{entry.docs ? (<span> | <a target='_blank' rel='noopener noreferrer' href={entry.docs}> Docs</a></span>) : null}{entry.videos ? (<span> | <a target='_blank' without rel='noopener noreferrer' href={entry.videos}> | Videos</a></span>) : null}\n          </div>\n      );\n      generatedTOC.push(text);\n    }\n\n    return generatedTOC;\n  }\n\n  showBranches() {\n    this.setState({showingBranches: !this.state.showingBranches});\n  }\n\n  showAll() {\n\n    let newDepth = this.state.showingAll ? 2 : 50;\n    this.state.initialDepth = newDepth;\n    this.setState({showingAll: !this.state.showingAll});\n    let newData = Object.assign({}, this.state.data); //We need this to be a new object to make the tree re-render\n    this.setTreeData(newData);\n  }\n\n  buildActionSentence() {\n    console.info('building action sentence......');\n    let text = \"Approach: collect data\";\n    for(let i=1;i<this.state.initialDepth;i++) {\n      text = text + \" - \" + this.state.actionSentence[i];\n    }\n    return text;\n  }\n\n  getEntryFromGeneratedData(entryId) {\n    for(let entry of taGenerate.data) {\n      if(entryId === entry.id) {\n        return entry;\n      }\n    }\n  }\n\n  getEntryFromGeneratedDataByName(name) {\n    for(let entry of taGenerate.data) {\n      if(name === entry.name) {\n        //console.info(\"Match: \", entry);\n        return entry;\n      }\n    }\n  }\n\n  hasChildPointers(node) {\n    if(node && node.childPointers && node.childPointers.length > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  //Here we set a new primary flag in the data\n  changePrimaryInGroupAndReload(name) {\n    let node = this.getEntryFromGeneratedDataByName(name);\n    console.info('changePrimaryInGroupAndReload.... ', node);\n    let groupId = node.groupId;\n    let groupNodes = [];\n    for(let entry of taGenerate.data) {\n      if(entry.groupId === groupId) {\n        console.info('setting primary false for..... ', groupId, entry);\n        if(entry.id === node.id) {\n          entry.primary = true;\n        } else {\n          entry.primary = false;\n        }\n      }\n    }\n    //let newData = this.generateTreeData();\n    let newData = Object.assign({}, this.populateAllTreeData(this.getEntryFromGeneratedData(\"A1\")));\n    //let newData = this.populateAllTreeData(this.getEntryFromGeneratedData(\"A1\"));\n    this.setTreeData(newData);\n    //this.populateAllTreeData(this.getEntryFromGeneratedData(\"A1\"));\n  }\n\n  //We need a method that gets past an id, we pull that node, check if it has children, populate them if it does, then recursivly pass again\n  populateAllTreeData(node) {\n    //console.info(\"****** Name | Primary\", node.name, node.primary)\n    if(this.hasChildPointers(node) && node.primary) {\n      let children = [];\n      for(let childPointer of node.childPointers) {\n        let child = this.getEntryFromGeneratedData(childPointer);\n        if(!child.primary) {\n          delete child.children;\n        }\n        children.push(child);\n      }\n      node.children = children;\n      //Now walk the children array and repeat\n      for(let childNode of children) {\n        if(childNode.primary) {\n          this.populateAllTreeData(childNode);\n        }\n      }\n    }\n    return node;\n  }\n\n  //Pass the id for the node that is clicked on and the tree will be built based on the current tree\n  generateTreeData() {\n    let flatData = taGenerate.data;\n    //We always start with the root item\n    let rootNode = this.getEntryFromGeneratedData(\"A1\");\n    let currentNode = rootNode;\n    let nextNode = null;\n    let depth = 50; //We set this value to know how far down the chain to go\n    let currentDepth = 0;\n\n    while(currentDepth < depth) {\n      //console.info(\"currentNode -- nextNode \", currentNode, nextNode);\n      currentDepth++;\n      if(this.hasChildPointers(currentNode)) {\n        let children = [];\n        for(let childPointer of currentNode.childPointers) {\n          let child = this.getEntryFromGeneratedData(childPointer);\n          children.push(child);\n          if(this.hasChildPointers(child) && child.primary) {\n            //console.info(\"Primary child with childPointers: \", child);\n            nextNode = child;\n          }\n        }\n        currentNode.children = children;\n        if(nextNode) {\n          currentNode = nextNode;\n          nextNode = null;\n        } else {\n          currentNode = null;\n        }\n      }\n    }\n    return rootNode;\n  }\n  _getTreeViewActionComponent(isTreeView){\n    return(<React.Fragment>\n        {/*this.state.showingBranches ? <ViewFilled size={16}  /> : <ViewOffFilled size={16} />*/}\n\n        <span className=''><a href='#' onClick={() => this.showBranches()}>{\n          !this.state.showingBranches ? 'show selected node text' : 'hide unselected node text'}</a>\n          {/*} <Toggle id=\"toggle-4\" labelText=\"unselected node text\" />*/}\n        </span> <span className={'divider'}/>\n        <span><a href='#' onClick={() => this.showAll()}>{this.state.showingAll ? ' collapse tree view' : ' expand tree view'} </a> </span>\n      </React.Fragment>\n    );\n  }\n\n\n  render() {\n\n    let toc = null;\n    if(this.state.tocMode) {\n      toc = this.generateToc();\n    }\n    //if its in tree view mode we should hide text\n    let isTreeView = !this.state.tocMode;\n\n    let treeViewActionComponent = this._getTreeViewActionComponent(isTreeView);\n    let actionControlCls = isTreeView ? 'tree--action-controls' : 'tree--action-controls-hide';\n    return (\n      <div className=\"App\">\n        <Header onClick={() => this.showModal()} {...this.props} />\n\n\n        {/*<h1> Mass Modernization Exemplar || <span style={{fontSize:'20px'}}><span style={{color:'green'}}>Green Nodes </span> = in scope for MVP</span></h1> */}\n        {/*<h3> {this.state.actionSentence} </h3>*/}\n        <nav>\n          <div className='view-controls'>\n            {/*<a href=\"#\" onClick={() => this.setTreeData(ta)}>main-path</a> |\n          <a href='#' onClick={() => this.setTreeData(taVerb)}>verb-path</a> |\n          <a href='#' onClick={() => this.setTreeData(this.populateAllTreeData(this.getEntryFromGeneratedData(\"A1\")))}>generate</a> | */}\n            <span><a href='#' onClick={() => this.showToc()}>{this.state.tocMode ? ' Show Tree ' : ' Show Table of Contents'}</a> </span>\n            <span className={actionControlCls}>{treeViewActionComponent}</span>\n\n          </div>\n        </nav>\n\n        <Modal\n          isOpen={this.state.showDialog}\n          onRequestClose={this.state.closeModal}\n          contentLabel=\"Exemplar Modal\"\n        >\n          <span><span ref={'refId'} style={{fontSize: '20px'}}>Click on the nodes to explore the tree and find your path to modernization!</span> <button style={{float:'right'}} onClick={this.state.closeModal}>Close</button></span>\n          <div style={{textAlign:'center'}}><img alt={''} height='75%' width='75%' src={'./modExemplar.gif'}/></div>\n        </Modal>\n\n        <div className=\"demo-container\">\n          <div className=\"column-right\">\n            {this.state.tocMode ?\n              (<React.Fragment>\n                <div className={'tree-container'}>{toc}</div>\n              </React.Fragment>)\n              :\n              <React.Fragment>\n\n                <div ref={tc => (this.treeContainer = tc)} className=\"tree-container\">\n                  <Tree\n                    hasInteractiveNodes\n                    data={this.state.data}\n                    renderCustomNodeElement={\n                      this.state.renderCustomNodeElement\n                        ? rd3tProps => this.state.renderCustomNodeElement(rd3tProps, this.state)\n                        : undefined\n                    }\n                    rootNodeClassName=\"demo-node\"\n                    branchNodeClassName=\"demo-node\"\n                    orientation={this.state.orientation}\n                    dimensions={this.state.dimensions}\n                    centeringTransitionDuration={this.state.centeringTransitionDuration}\n                    translate={{ x: this.state.translateX, y: this.state.translateY }}\n                    pathFunc={this.state.pathFunc}\n                    collapsible={this.state.collapsible}\n                    initialDepth={this.state.initialDepth}\n                    zoomable={this.state.zoomable}\n                    draggable={this.state.draggable}\n                    zoom={this.state.zoom}\n                    scaleExtent={this.state.scaleExtent}\n                    nodeSize={this.state.nodeSize}\n                    separation={this.state.separation}\n                    enableLegacyTransitions={this.state.enableLegacyTransitions}\n                    transitionDuration={this.state.transitionDuration}\n                    depthFactor={this.state.depthFactor}\n                    styles={this.state.styles}\n                    shouldCollapseNeighborNodes={this.state.shouldCollapseNeighborNodes}\n                    // onUpdate={(...args) => {console.log(args)}}\n                    onNodeClick={(node, evt) => {\n                      console.log('onNodeClick', node, evt);\n                    }}\n                    onNodeMouseOver={(...args) => {\n                      console.log('onNodeMouseOver', args);\n                    }}\n                    onNodeMouseOut={(...args) => {\n                      console.log('onNodeMouseOut', args);\n                    }}\n                    onLinkClick={(...args) => {\n                      console.log('onLinkClick');\n                      console.log(args);\n                    }}\n                    onLinkMouseOver={(...args) => {\n                      console.log('onLinkMouseOver', args);\n                    }}\n                    onLinkMouseOut={(...args) => {\n                      console.log('onLinkMouseOut', args);\n                    }}\n                  />\n                </div></React.Fragment>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')).render(<App />);\n"],"sourceRoot":""}