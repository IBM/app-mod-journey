{"version":3,"sources":["examples/org-chart.json.bck","components/MixedNodeElement.js","components/Switch/index.js","components/PureSvgNodeElement.js","components/MixedNodeInputElement.js","App.js","index.js"],"names":["module","exports","MixedNodeElement","Component","_ref","_ref$nodeData","nodeData","triggerNodeToggle","_ref$foreignObjectPro","foreignObjectProps","React","createElement","Fragment","r","style","display","flexDirection","alignItems","border","paddingBottom","backgroundColor","name","listStyleType","padding","attributes","Object","keys","map","labelKey","i","key","concat","children","textAlign","onClick","__rd3t","collapsed","textLayout","vertical","title","textAnchor","x","attribute","dy","horizontal","y","PureSvgNodeElement","nodeDatum","orientation","toggleNode","onNodeClick","className","assign","entries","_ref2","_ref3","_slicedToArray","labelValue","descriptionTimerInfo","timerId","nodeName","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","nodeClick","bind","_assertThisInitialized","nodeMouseEnter","nodeMouseLeave","getObjectInTreeByNodename","swapChildrenInTree","state","showDescription","_createClass","value","treeData","currentNodeWithChildren","matchedNode","failSafe","actionSentence","this","findNodeInTree","findNodeWithChildrenInTree","e","console","info","treeNode","treeBranch","length","depth","appState","data","initialDepth","lockChildren","newData","updateActionSentence","getActionSentence","updateTree","matchingObject","changePrimary","nodeWithChildren","nextNodeWithChildren","dataArray","nodeToAddChildren","_this2","_this$props$nodeData","props","setTimeout","setState","clearTimeout","_this$props","_this$props$nodeData2","swapChildrenInTree2","color","_this$props2","_this$props2$nodeData","_this$props2$foreignO","nodeNameFontSize","onMouseEnter","onMouseLeave","showingBranches","primary","height","fontWeight","fontSize","root","docs","target","href","videos","width","description","log","version","customNodeFnMapping","svg","fn","rd3tProps","mixed","nodeSize","input","MixedNodeInputElement","countNodes","count","arguments","undefined","n","reduce","sum","child","App","closeModal","showDialog","showModal","handleCustomNodeFnChange","evt","customNodeKey","renderCustomNodeElement","toggleCollapseNeighborNodes","prevState","shouldCollapseNeighborNodes","addChildNode","clone","_children","addedNodesCount","push","id","removeChildNode","pop","setTreeData","setActionSentence","generateTreeData","changePrimaryInGroupAndReload","ta","totalNodeCount","Array","isArray","orgChartJson","dimensions","centeringTransitionDuration","translateX","translateY","collapsible","depthFactor","zoomable","draggable","zoom","scaleExtent","min","max","separation","siblings","nonSiblings","enableLegacyTransitions","transitionDuration","showingAll","styles","nodes","node","circle","fill","stroke","leafNode","setLargeTree","setOrientation","setPathFunc","handleChange","handleFloatChange","toggleCollapsible","toggleZoomable","toggleDraggable","toggleCenterNodes","setScaleExtent","setSeparation","setNodeSize","pathFunc","parsedIntValue","parseInt","_defineProperty","isNaN","parsedFloatValue","parseFloat","treeContainer","_this$treeContainer$g","getBoundingClientRect","populateAllTreeData","getEntryFromGeneratedData","newDepth","text","entryId","_step","_iterator","_createForOfIteratorHelper","taGenerate","s","done","entry","err","f","_step2","_iterator2","childPointers","getEntryFromGeneratedDataByName","_step3","groupId","_iterator3","hasChildPointers","_step4","_iterator4","childPointer","_i","childNode","flatData","rootNode","currentNode","nextNode","currentDepth","_step5","_iterator5","src","showBranches","showAll","Modal","isOpen","onRequestClose","contentLabel","ref","float","tc","Tree","hasInteractiveNodes","rootNodeClassName","branchNodeClassName","translate","onNodeMouseOver","_len","args","_key","onNodeMouseOut","_len2","_key2","onLinkClick","_len3","_key3","onLinkMouseOver","_len4","_key4","onLinkMouseOut","_len5","_key5","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.3cf45583.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/org-chart.json.fefe41cd.bck\";","import React from 'react';\n\nconst MixedNodeElement = ({ nodeData = {}, triggerNodeToggle, foreignObjectProps = {} }) => {\n  return (\n    <React.Fragment>\n      <circle r={20}></circle>\n      <foreignObject {...foreignObjectProps}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            border: '1px solid black',\n            paddingBottom: '1rem',\n            backgroundColor: 'rgb(248, 248, 255)', // ghostwhite\n          }}\n        >\n          <h3>{nodeData.name}</h3>\n          <ul style={{ listStyleType: 'none', padding: 0 }}>\n            {nodeData.attributes &&\n              Object.keys(nodeData.attributes).map((labelKey, i) => (\n                <li key={`${labelKey}-${i}`}>\n                  {labelKey}: {nodeData.attributes[labelKey]}\n                </li>\n              ))}\n          </ul>\n          {nodeData.children && (\n            <button style={{ textAlign: 'center' }} onClick={triggerNodeToggle}>\n              {nodeData.__rd3t.collapsed ? '⬅️ ➡️ Expand' : '➡️ ⬅️ Collapse'}\n            </button>\n          )}\n        </div>\n      </foreignObject>\n    </React.Fragment>\n  );\n};\n\nexport default MixedNodeElement;\n","import PropTypes from 'prop-types'\nimport React, { Component } from 'react';\nimport './styles.css';\n\nclass Input extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool.isRequired,\n    variable: PropTypes.object\n  };\n\n  render() {\n    const { variable, name, onChange, checked } = this.props;\n    return (\n      <div className='onoffswitch'>\n        <input type='checkbox' className='onoffswitch-checkbox' id={name} name={name}\n          onChange={onChange} checked={checked} {...variable} />\n        <label className='onoffswitch-label' htmlFor={name}>\n          <span className='onoffswitch-inner' />\n          <span className='onoffswitch-switch' />\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default Input;","import React from 'react';\n\nconst textLayout = {\n  vertical: {\n    title: {\n      textAnchor: 'start',\n      x: 40,\n    },\n    attributes: {},\n    attribute: {\n      x: 40,\n      dy: '1.2em',\n    },\n  },\n  horizontal: {\n    title: {\n      textAnchor: 'start',\n      y: 40,\n    },\n    attributes: {\n      x: 0,\n      y: 40,\n    },\n    attribute: {\n      x: 0,\n      dy: '1.2em',\n    },\n  },\n};\n\nconst PureSvgNodeElement = ({ nodeDatum, orientation, toggleNode, onNodeClick }) => {\n  return (\n    <>\n      <circle r={20} onClick={toggleNode}></circle>\n      <g className=\"rd3t-label\">\n        <text\n          className=\"rd3t-label__title\"\n          {...textLayout[orientation].title}\n          onClick={onNodeClick}\n        >\n          {nodeDatum.name}\n        </text>\n        <text className=\"rd3t-label__attributes\" {...textLayout[orientation].attributes}>\n          {nodeDatum.attributes &&\n            Object.entries(nodeDatum.attributes).map(([labelKey, labelValue], i) => (\n              <tspan key={`${labelKey}-${i}`} {...textLayout[orientation].attribute}>\n                {labelKey}: {labelValue}\n              </tspan>\n            ))}\n        </text>\n      </g>\n    </>\n  );\n};\n\nexport default PureSvgNodeElement;\n","import React from 'react';\nimport { Component } from 'react';\n\nlet descriptionTimerInfo = {timerId: null, nodeName: ''};\n\nclass MixedNodeElement extends Component {\n\n    constructor() {\n        super();\n        this.nodeClick = this.nodeClick.bind(this);\n        this.nodeMouseEnter = this.nodeMouseEnter.bind(this);\n        this.nodeMouseLeave = this.nodeMouseLeave.bind(this);\n        this.getObjectInTreeByNodename = this.getObjectInTreeByNodename.bind(this);\n        this.swapChildrenInTree = this.swapChildrenInTree.bind(this);\n\n        this.state = {showDescription: false}\n    }\n\n    getActionSentence(treeData, name) {\n        let currentNodeWithChildren = treeData;\n        let matchedNode = null;\n        let failSafe = 0;\n        let actionSentence = \"collect data\"\n        try {\n            while(matchedNode == null && failSafe < 50) {\n                failSafe++;\n                matchedNode = this.findNodeInTree(currentNodeWithChildren, name);\n                currentNodeWithChildren = this.findNodeWithChildrenInTree(currentNodeWithChildren);\n                if(matchedNode != null) {\n                    actionSentence = actionSentence + \" - \" + matchedNode.name;\n                } else {\n                    actionSentence = actionSentence + \" - \" + currentNodeWithChildren.name;\n                }\n            }\n        } catch(e) {\n            console.info('Some issue with constructing the sentence.....');\n        }\n\n        return actionSentence;\n    }\n\n    findNodeWithChildrenInTree(treeNode)  {\n        if(treeNode != null) {\n            let treeBranch = treeNode.children;\n            for(let i=0;i<treeBranch.length;i++) {\n                if(treeBranch[i].children) {\n                    return treeBranch[i];\n                }\n            }\n        }\n        return null;\n    }\n\n  //Search for node in this tree branch, returning null if it is not found\n  findNodeInTree(treeNode, name, depth)  {\n        if(treeNode != null) {\n            let treeBranch = treeNode.children\n            //check the name\n            for(let i=0;i<treeBranch.length;i++) {\n                if(treeBranch[i].name == name) {\n                    let matchedNode = treeBranch[i];\n                    return {matchedNode, depth}\n                }\n            }\n            //check for children in the branch\n            for(let i=0;i<treeBranch.length;i++) {\n                if(treeBranch[i].children && treeBranch[i].children.length > 0) {\n                    depth++;\n                    return this.findNodeInTree(treeBranch[i], name, depth);\n                }\n            }\n        }\n        return null;\n  }\n\n  //This takes the whole tree data and a name\n  //It finds the node with that name, and the children at the same level as that node and swaps them, rturning the new data\n  swapChildrenInTree(appState, data, name, triggerNodeToggle) {\n      let currentNodeWithChildren = data;\n      let matchedNode = null;\n      let initialDepth = 1; //If we ask for a node that is not there, make sure we can break the loop\n      while(matchedNode == null && initialDepth < 50) {\n          initialDepth++;\n          matchedNode = this.findNodeInTree(currentNodeWithChildren, name);\n          currentNodeWithChildren = this.findNodeWithChildrenInTree(currentNodeWithChildren);\n      }\n\n      //Now swap the children, merge and return the data\n      if(currentNodeWithChildren != null) {\n              if(!matchedNode.lockChildren) {\n                  matchedNode.children = currentNodeWithChildren.children;\n              }\n              if(matchedNode.name !== currentNodeWithChildren.name) {\n                  if(!currentNodeWithChildren.lockChildren) {\n                      delete currentNodeWithChildren.children;\n                  }\n                  appState.initialDepth = initialDepth;\n              }\n          let newData = Object.assign({}, data);\n          appState.updateActionSentence(this.getActionSentence(appState.data, matchedNode.name));\n          appState.updateTree(newData);\n      }\n  }\n\n  swapChildrenInTree2(appState, data, name, triggerNodeToggle) {\n        let currentNodeWithChildren = data;\n        let matchedNode = null;\n        let depth = 50;\n        let initialDepth = 1; //If we ask for a node that is not there, make sure we can break the loop\n        while(matchedNode == null && initialDepth < 50) {\n            initialDepth++;\n            let matchingObject = this.findNodeInTree(currentNodeWithChildren, name, initialDepth);\n            matchedNode = matchingObject.matchedNode;\n            depth = matchingObject.depth;\n        }\n          appState.initialDepth = depth;\n          appState.changePrimary(name);\n    }\n\n  //We walk the tree and find the JS object with the matching name\n  getObjectInTreeByNodename(nodeWithChildren, name) {\n      let nextNodeWithChildren = null;\n\n      if(nodeWithChildren != null && nodeWithChildren.children && nodeWithChildren.children.length > 0) {\n          let dataArray = nodeWithChildren.children;\n          for(let x=0;x<dataArray.length;x++) {\n              if(dataArray[x].children && dataArray[x].children.length > 0) {\n                  nextNodeWithChildren = dataArray[x];\n              }\n          }\n          for(let i=0;i<dataArray.length;i++) {\n              if(dataArray[i].name === name) {\n                  let nodeToAddChildren =  dataArray[i];\n                  return {nodeToAddChildren, nextNodeWithChildren}\n              }\n          }\n          return this.getObjectInTreeByNodename(nextNodeWithChildren, name);\n      }\n  }\n\n  //When we enter the node we give a short delay then we pop up a description\n  nodeMouseEnter() {\n      let {nodeData = {}} = this.props;\n      if(nodeData) {\n          //If we already are running a timer for the description for this node then do nothing\n          if(nodeData.name == descriptionTimerInfo.nodeName) {\n              return;\n          }\n          let timerId = setTimeout(() =>{\n              this.setState({showDescription: true});\n              //Now this is where I pop up the dialog or something\n          }, 800);\n          descriptionTimerInfo = {timerId: timerId, nodeName: nodeData.name}\n      }\n  }\n\n  nodeMouseLeave() {\n        if(descriptionTimerInfo != null && descriptionTimerInfo.timerId != null) {\n          clearTimeout(descriptionTimerInfo.timerId);\n          descriptionTimerInfo = {timerId: null, nodeName: ''}\n          if(this.state.showDescription) {\n              this.setState({showDescription: false});\n          }\n      }\n  }\n\n  nodeClick() {\n      let {appState, nodeData = {}, triggerNodeToggle, foreignObjectProps = {}} = this.props;\n      //At this point we find the siblings of this node, then find the one with children and move those children to this node\n      //Going to hard code for now\n      if(nodeData.children && nodeData.children.length >0) {\n          appState.updateActionSentence(this.getActionSentence(appState.data, nodeData.name));\n          triggerNodeToggle();\n      } else {\n          this.swapChildrenInTree2(appState, appState.data, nodeData.name, triggerNodeToggle);\n      }\n  }\n\n  getFontColor(color) {\n        //Override for now\n        return 'black';\n        if(color != 'undefined') {\n            return color;\n        }\n        return 'black';\n  }\n\n  render() {\n      let {appState, nodeData = {}, triggerNodeToggle, foreignObjectProps = {}} = this.props;\n      let nodeNameFontSize = '25px'\n      if(nodeData.name.length > 35) {\n          nodeNameFontSize = '22px'\n      }else {\n          nodeNameFontSize = '25px'\n      }\n\n        return (\n            <React.Fragment>\n                <circle r={20} onClick={this.nodeClick} onMouseEnter={this.nodeMouseEnter} onMouseLeave={this.nodeMouseLeave}></circle>\n                {!appState.showingBranches && !nodeData.primary ? null :\n                    <foreignObject {...foreignObjectProps} >\n                        <div\n                            style={{\n                                height: '100%',\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                                textAlign: 'center',\n                                //justifyContent: 'space-between',\n                                border: '1px solid white',\n                                paddingBottom: '1rem',\n                            }}\n                        >\n                            <div style={{backgroundColor: 'white'}}>\n                                <span onClick={this.nodeClick} onMouseEnter={this.nodeMouseEnter}\n                                      onMouseLeave={this.nodeMouseLeave} style={{\n                                    backgroundColor: 'white',\n                                    color: nodeData.primary ? 'black' : 'grey',\n                                    fontWeight: nodeData.primary ? '700' : '400',\n                                    fontSize: nodeNameFontSize\n                                }}>{nodeData.name}</span>\n                                {nodeData.root ? (<div/>) :\n                                    <div style={{backgroundColor: 'white'}}>\n                                        <span style={{fontSize: 22}}>{nodeData.docs ? (\n                                            <a target='_blank' href={nodeData.docs}>Docs</a>) : ''}</span>\n                                        <span\n                                            style={{fontSize: 22}}> {(nodeData.docs && nodeData.videos) ? ('|') : ''} </span>\n                                        <span style={{fontSize: 22}}>{nodeData.videos ? (\n                                            <a target='_blank' href={nodeData.videos}>Videos</a>) : ''}</span>\n                                    </div>}\n                            </div>\n                        </div>\n                    </foreignObject>\n                }\n\n                {/* WATCH OUT!! If you pop the tooltip so that is covers the mouse it will trigger the mouseLeave and you get a flickering loop*/}\n                {this.state.showDescription ?\n                    <foreignObject width={300} height={200} x={-150} y={-225}>\n                        <div\n                            style={{\n                                height: '100%',\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                                textAlign: 'center',\n                                //justifyContent: 'space-between',\n                                border: '1px solid black',\n                                paddingBottom: '1rem',\n                                backgroundColor: 'rgb(248, 248, 255)', // ghostwhite\n                                //backgroundColor: 'white',\n                            }}\n                        >\n                            <span style={{color: 'black', fontWeight: '400', fontSize: '20px'}}>\n                                <p>{nodeData.name}</p>\n                                <p>{nodeData.description ? nodeData.description : ''}</p>\n                            </span>\n                        </div>\n                    </foreignObject>\n                    :\n                    null\n                }\n            </React.Fragment>\n        );\n    }\n//};\n\n}\n\nexport default MixedNodeElement;\n","import React, { Component } from 'react';\nimport clone from 'clone';\nimport Tree from 'react-d3-tree';\nimport { version } from 'react-d3-tree/package.json';\nimport Switch from './components/Switch';\nimport MixedNodeElement from './components/MixedNodeElement';\nimport PureSvgNodeElement from './components/PureSvgNodeElement';\nimport MixedNodeInputElement from './components/MixedNodeInputElement';\nimport './App.css';\n\n// Data examples\nimport orgChartJson from './examples/org-chart.json.bck';\nimport ta from './examples/ta.json';\nimport taGenerate from './examples/ta-generate.json';\n\nimport Modal from 'react-modal';\n\nconsole.log('Demo React version: ', React.version);\n\nconst customNodeFnMapping = {\n  svg: {\n    description: 'Default - Pure SVG node & label (IE11 compatible)',\n    fn: (rd3tProps, appState) => (\n      <PureSvgNodeElement\n        nodeDatum={rd3tProps.nodeDatum}\n        toggleNode={rd3tProps.toggleNode}\n        orientation={appState.orientation}\n      />\n    ),\n  },\n  mixed: {\n    description: 'MixedNodeElement - SVG `circle` + `foreignObject` label',\n    fn: ({ nodeDatum, toggleNode }, appState) => (\n      <MixedNodeElement\n        nodeData={nodeDatum}\n        triggerNodeToggle={toggleNode}\n        foreignObjectProps={{\n          width: appState.nodeSize.x,\n          height: appState.nodeSize.y,\n          x: -50,\n          y: 50,\n        }}\n      />\n    ),\n  },\n  input: {\n    description: 'MixedNodeElement - Interactive nodes with inputs',\n    fn: ({ nodeDatum, toggleNode }, appState) => (\n      <MixedNodeInputElement\n        nodeData={nodeDatum}\n        triggerNodeToggle={toggleNode}\n        appState={appState}\n        foreignObjectProps={{\n          width: appState.nodeSize.x,\n          height: appState.nodeSize.y,\n          x: -50,\n          y: 25,\n        }}\n      />\n    ),\n  },\n};\n\nconst countNodes = (count = 0, n) => {\n  // Count the current node\n  count += 1;\n\n  // Base case: reached a leaf node.\n  if (!n.children) {\n    return count;\n  }\n\n  // Keep traversing children while updating `count` until we reach the base case.\n  return n.children.reduce((sum, child) => countNodes(sum, child), count);\n};\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n  },\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.addedNodesCount = 0;\n\n    this.setTreeData = this.setTreeData.bind(this);\n    this.setActionSentence = this.setActionSentence.bind(this);\n    this.generateTreeData = this.generateTreeData.bind(this);\n    this.changePrimaryInGroupAndReload = this.changePrimaryInGroupAndReload.bind(this);\n\n    this.state = {\n      data: ta,\n      updateTree: this.setTreeData,\n      changePrimary: this.changePrimaryInGroupAndReload,\n      updateActionSentence: this.setActionSentence,\n      totalNodeCount: countNodes(0, Array.isArray(orgChartJson) ? orgChartJson[0] : orgChartJson),\n      orientation: 'horizontal',\n      dimensions: undefined,\n      centeringTransitionDuration: 800,\n      translateX: 200,\n      translateY: 200,\n      collapsible: true,\n      shouldCollapseNeighborNodes: false,\n      initialDepth: 2,\n      depthFactor: 250,\n      zoomable: true,\n      draggable: true,\n      zoom: 0.6,\n      scaleExtent: { min: 0.1, max: 5 },\n      separation: { siblings: 1.25, nonSiblings: 1.75 },\n      nodeSize: { x: 200, y: 150 },\n      enableLegacyTransitions: false,\n      transitionDuration: 500,\n      renderCustomNodeElement: customNodeFnMapping['input'].fn,\n      showingBranches: true,\n      showingAll: false,\n      showDialog: false,\n      closeModal: this.closeModal,\n      actionSentence: [],\n      styles: {\n        nodes: {\n          node: {\n            circle: {\n              fill: '#52e2c5',\n            },\n            attributes: {\n              stroke: '#000',\n            },\n          },\n          leafNode: {\n            circle: {\n              fill: 'transparent',\n            },\n            attributes: {\n              stroke: '#000',\n            },\n          },\n        },\n      },\n    };\n\n    this.setLargeTree = this.setLargeTree.bind(this);\n    this.setOrientation = this.setOrientation.bind(this);\n    this.setPathFunc = this.setPathFunc.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFloatChange = this.handleFloatChange.bind(this);\n    this.toggleCollapsible = this.toggleCollapsible.bind(this);\n    this.toggleZoomable = this.toggleZoomable.bind(this);\n    this.toggleDraggable = this.toggleDraggable.bind(this);\n    this.toggleCenterNodes = this.toggleCenterNodes.bind(this);\n    this.setScaleExtent = this.setScaleExtent.bind(this);\n    this.setSeparation = this.setSeparation.bind(this);\n    this.setNodeSize = this.setNodeSize.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  closeModal = () => {\n    this.setState({showDialog: false});\n  };\n\n  showModal = () => {\n    this.setState({showDialog: true});\n  };\n\n  setTreeData(data) {\n    console.info('..... setTreeData .....', data);\n    this.setState({\n      data/*,\n      totalNodeCount: countNodes(0, Array.isArray(data) ? data[0] : data),*/\n    });\n  }\n\n  setActionSentence(actionSentence) {\n    console.info('..... actionSentence .....', actionSentence);\n    this.setState({\n      actionSentence\n    });\n  }\n\n  setLargeTree(data) {\n    this.setState({\n      data,\n      transitionDuration: 0,\n    });\n  }\n\n  setOrientation(orientation) {\n    this.setState({ orientation });\n  }\n\n  setPathFunc(pathFunc) {\n    this.setState({ pathFunc });\n  }\n\n  handleChange(evt) {\n    const target = evt.target;\n    const parsedIntValue = parseInt(target.value, 10);\n    if (target.value === '') {\n      this.setState({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedIntValue)) {\n      this.setState({\n        [target.name]: parsedIntValue,\n      });\n    }\n  }\n\n  handleFloatChange(evt) {\n    const target = evt.target;\n    const parsedFloatValue = parseFloat(target.value);\n    if (target.value === '') {\n      this.setState({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedFloatValue)) {\n      this.setState({\n        [target.name]: parsedFloatValue,\n      });\n    }\n  }\n\n  handleCustomNodeFnChange = evt => {\n    const customNodeKey = evt.target.value;\n\n    this.setState({ renderCustomNodeElement: customNodeFnMapping[customNodeKey].fn });\n  };\n\n  toggleCollapsible() {\n    this.setState(prevState => ({ collapsible: !prevState.collapsible }));\n  }\n\n  toggleCollapseNeighborNodes = () => {\n    this.setState(prevState => ({\n      shouldCollapseNeighborNodes: !prevState.shouldCollapseNeighborNodes,\n    }));\n  };\n\n  toggleZoomable() {\n    this.setState(prevState => ({ zoomable: !prevState.zoomable }));\n  }\n\n  toggleDraggable() {\n    this.setState(prevState => ({ draggable: !prevState.draggable }));\n  }\n\n  toggleCenterNodes() {\n    if (this.state.dimensions !== undefined) {\n      this.setState({\n        dimensions: undefined,\n      });\n    } else {\n      if (this.treeContainer) {\n        const { width, height } = this.treeContainer.getBoundingClientRect();\n        this.setState({\n          dimensions: {\n            width,\n            height,\n          },\n        });\n      }\n    }\n  }\n\n  setScaleExtent(scaleExtent) {\n    this.setState({ scaleExtent });\n  }\n\n  setSeparation(separation) {\n    if (!isNaN(separation.siblings) && !isNaN(separation.nonSiblings)) {\n      this.setState({ separation });\n    }\n  }\n\n  setNodeSize(nodeSize) {\n    if (!isNaN(nodeSize.x) && !isNaN(nodeSize.y)) {\n      this.setState({ nodeSize });\n    }\n  }\n\n  addChildNode = () => {\n    console.info('......addChildNode.....')\n    const data = clone(this.state.data);\n    const target = data[0].children ? data[0].children : data[0]._children;\n    this.addedNodesCount++;\n    target.push({\n      name: `Inserted Node ${this.addedNodesCount}`,\n      id: `inserted-node-${this.addedNodesCount}`,\n    });\n    this.setState({\n      data,\n    });\n  };\n\n  removeChildNode = () => {\n    const data = clone(this.state.data);\n    const target = data[0].children ? data[0].children : data[0]._children;\n    target.pop();\n    this.addedNodesCount--;\n    this.setState({\n      data,\n    });\n  };\n\n  componentDidMount() {\n    const dimensions = this.treeContainer.getBoundingClientRect();\n    this.setState({\n      translateX: dimensions.width / 25,\n      translateY: dimensions.height / 2.5,\n    });\n    this.setTreeData(this.populateAllTreeData(this.getEntryFromGeneratedData(\"A1\")));\n  }\n\n  showBranches() {\n    console.info('showBranches');\n    this.setState({showingBranches: !this.state.showingBranches});\n  }\n\n  showAll() {\n\n    let newDepth = this.state.showingAll ? 2 : 50;\n    this.state.initialDepth = newDepth;\n    this.setState({showingAll: !this.state.showingAll});\n    let newData = Object.assign({}, this.state.data); //We need this to be a new object to make the tree re-render\n    this.setTreeData(newData);\n  }\n\n  buildActionSentence() {\n    console.info('building action sentence......');\n    let text = \"Approach: collect data\";\n    for(let i=1;i<this.state.initialDepth;i++) {\n      text = text + \" - \" + this.state.actionSentence[i];\n    }\n    return text;\n  }\n\n  getEntryFromGeneratedData(entryId) {\n    for(let entry of taGenerate.data) {\n      if(entryId === entry.id) {\n        //console.info(\"Match: \", entry);\n        return entry;\n      }\n    }\n  }\n\n  getEntryFromGeneratedDataByName(name) {\n    for(let entry of taGenerate.data) {\n      if(name === entry.name) {\n        //console.info(\"Match: \", entry);\n        return entry;\n      }\n    }\n  }\n\n  hasChildPointers(node) {\n    if(node && node.childPointers && node.childPointers.length > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  //Here we set a new primary flag in the data\n  changePrimaryInGroupAndReload(name) {\n    let node = this.getEntryFromGeneratedDataByName(name);\n    console.info('changePrimaryInGroupAndReload.... ', node);\n    let groupId = node.groupId;\n    let groupNodes = [];\n    for(let entry of taGenerate.data) {\n      if(entry.groupId === groupId) {\n        console.info('setting primary false for..... ', groupId, entry);\n        if(entry.id === node.id) {\n          entry.primary = true;\n        } else {\n          entry.primary = false;\n        }\n      }\n    }\n    console.info('AFTER == taGenerate.data: ', taGenerate.data);\n    //let newData = this.generateTreeData();\n    let newData = Object.assign({}, this.populateAllTreeData(this.getEntryFromGeneratedData(\"A1\")));\n    //let newData = this.populateAllTreeData(this.getEntryFromGeneratedData(\"A1\"));\n    console.info('newData=== ',newData);\n    this.setTreeData(newData);\n    //this.populateAllTreeData(this.getEntryFromGeneratedData(\"A1\"));\n  }\n\n  //We need a method that gets past an id, we pull that node, check if it has children, populate them if it does, then recursivly pass again\n  populateAllTreeData(node) {\n    //console.info(\"****** Name | Primary\", node.name, node.primary)\n    if(this.hasChildPointers(node) && node.primary) {\n      let children = [];\n      for(let childPointer of node.childPointers) {\n        let child = this.getEntryFromGeneratedData(childPointer);\n        if(!child.primary) {\n          delete child.children;\n        }\n        children.push(child);\n      }\n      node.children = children;\n      //Now walk the children array and repeat\n      for(let childNode of children) {\n        if(childNode.primary) {\n          this.populateAllTreeData(childNode);\n        }\n      }\n    }\n    console.info('NODE:: ', node);\n    return node;\n  }\n\n  //Pass the id for the node that is clicked on and the tree will be built based on the current tree\n  generateTreeData() {\n    console.info('generateTreeData......');\n    let flatData = taGenerate.data;\n    console.info(\"flatData >>> \", flatData);\n    //We always start with the root item\n    let rootNode = this.getEntryFromGeneratedData(\"A1\");\n    let currentNode = rootNode;\n    let nextNode = null;\n    let depth = 50; //We set this value to know how far down the chain to go\n    let currentDepth = 0;\n\n    while(currentDepth < depth) {\n      //console.info(\"currentNode -- nextNode \", currentNode, nextNode);\n      currentDepth++;\n      if(this.hasChildPointers(currentNode)) {\n        let children = [];\n        for(let childPointer of currentNode.childPointers) {\n          let child = this.getEntryFromGeneratedData(childPointer);\n          children.push(child);\n          if(this.hasChildPointers(child) && child.primary) {\n            //console.info(\"Primary child with childPointers: \", child);\n            nextNode = child;\n          }\n        }\n        currentNode.children = children;\n        if(nextNode) {\n          currentNode = nextNode;\n          nextNode = null;\n        } else {\n          currentNode = null;\n        }\n      }\n    }\n    return rootNode;\n  }\n\n  render() {\n    //let generatedData = this.generateTreeData();\n    //console.info('generatedData == ', generatedData);\n    //let rootNode = this.getEntryFromGeneratedData(\"A1\");\n    //let tree = this.populateAllTreeData(rootNode);\n    //console.info('TREE:: ', tree);\n\n    return (\n      <div className=\"App\">\n        <h1 style={{textAlign: 'center'}}><img width=\"36\" height=\"36\" src={'./favicon.png'}></img> Java Application Modernization Playbook <span style={{fontSize:'20px'}}> with Transformation Advsior</span></h1>\n        {/*<h1> Mass Modernization Exemplar || <span style={{fontSize:'20px'}}><span style={{color:'green'}}>Green Nodes </span> = in scope for MVP</span></h1> */}\n        {/*<h3> {this.state.actionSentence} </h3>*/}\n        <hr/>\n        <h5 style={{textAlign: 'center'}}>\n          {/*<a href=\"#\" onClick={() => this.setTreeData(ta)}>main-path</a> |\n          <a href='#' onClick={() => this.setTreeData(taVerb)}>verb-path</a> |\n          <a href='#' onClick={() => this.setTreeData(this.populateAllTreeData(this.getEntryFromGeneratedData(\"A1\")))}>generate</a> | */}\n          <span><a href='#' onClick={() => this.showModal()}> About</a> </span> |\n          <span><a href='#' onClick={() => this.showBranches()}>{this.state.showingBranches ? ' Hide unselected node text ' : ' Show unselected node text'}</a> </span> |\n          <span><a href='#' onClick={() => this.showAll()}>{this.state.showingAll ? ' Hide full tree ' : ' Show full tree'}</a> </span> |\n          <span><a target='_blank' href='https://github.com/IBM/app-mod-journey/tree/main'> Contribute</a> </span>\n        </h5>\n        <Modal\n            isOpen={this.state.showDialog}\n            onRequestClose={this.state.closeModal}\n            contentLabel=\"Exemplar Modal\"\n        >\n          <span><span ref={'refId'} style={{fontSize: '20px'}}>Click on the nodes to explore the tree and find your path to modernization!</span> <button style={{float:'right'}} onClick={this.state.closeModal}>Close</button></span>\n          <div style={{textAlign:'center'}}><img height='75%' width='75%' src={'./modExemplar.gif'}/></div>\n\n        </Modal>\n\n        <div className=\"demo-container\">\n          <div className=\"column-right\">\n            <div ref={tc => (this.treeContainer = tc)} className=\"tree-container\">\n              <Tree\n                hasInteractiveNodes\n                data={this.state.data}\n                renderCustomNodeElement={\n                  this.state.renderCustomNodeElement\n                    ? rd3tProps => this.state.renderCustomNodeElement(rd3tProps, this.state)\n                    : undefined\n                }\n                rootNodeClassName=\"demo-node\"\n                branchNodeClassName=\"demo-node\"\n                orientation={this.state.orientation}\n                dimensions={this.state.dimensions}\n                centeringTransitionDuration={this.state.centeringTransitionDuration}\n                translate={{ x: this.state.translateX, y: this.state.translateY }}\n                pathFunc={this.state.pathFunc}\n                collapsible={this.state.collapsible}\n                initialDepth={this.state.initialDepth}\n                zoomable={this.state.zoomable}\n                draggable={this.state.draggable}\n                zoom={this.state.zoom}\n                scaleExtent={this.state.scaleExtent}\n                nodeSize={this.state.nodeSize}\n                separation={this.state.separation}\n                enableLegacyTransitions={this.state.enableLegacyTransitions}\n                transitionDuration={this.state.transitionDuration}\n                depthFactor={this.state.depthFactor}\n                styles={this.state.styles}\n                shouldCollapseNeighborNodes={this.state.shouldCollapseNeighborNodes}\n                // onUpdate={(...args) => {console.log(args)}}\n                onNodeClick={(node, evt) => {\n                  console.log('onNodeClick', node, evt);\n                }}\n                onNodeMouseOver={(...args) => {\n                  console.log('onNodeMouseOver', args);\n                }}\n                onNodeMouseOut={(...args) => {\n                  console.log('onNodeMouseOut', args);\n                }}\n                onLinkClick={(...args) => {\n                  console.log('onLinkClick');\n                  console.log(args);\n                }}\n                onLinkMouseOver={(...args) => {\n                  console.log('onLinkMouseOver', args);\n                }}\n                onLinkMouseOut={(...args) => {\n                  console.log('onLinkMouseOut', args);\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')).render(<App />);\n"],"sourceRoot":""}